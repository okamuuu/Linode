= MySQLレプリケーション =

'''''MySQLで可用性を高める手法としてよく採用される、レプリケーションを紹介します。'''''

== SEE ALSO ==

参考文献:

<a href="http://www.amazon.co.jp/gp/product/4798120723?ie=UTF8&tag=street04-22&linkCode=as2&camp=247&creative=1211&creativeASIN=4798120723">Linux-DB システム構築/運用入門 (DB Magazine SELECTION)</a><img src="http://www.assoc-amazon.jp/e/ir?t=street04-22&l=as2&o=9&a=4798120723" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />

== レプリケーションとは ==

1つのDBサーバーのコピーを、他のDBサーバー上に作成します。

MySQLでは''マスター''と''スレーブ''の役割を担当します。

マスターを更新すると''バイナリログ''という専用の更新系ログファイルが出力され、スレーブに転送されます。

スレーブはそのバイナリログを''実行''することによってマスターと同じ内容のデータを保持することになります。

この処理は非同期で行われるので若干のタイムラグが存在します。

== オーソドックスな構成 ==

1台のマスターに対して、スレーブが1台、もしくは複数台という構成は非常に多く見かけられます。

=== メリット ===

 * マスター、スレーブともに稼働しているので、空き状態になるマシンがない。
 * 更新はマスターしか行えないが、参照はどちらに対してでも行える
 * 参照処理はどれか一つでもサーバーが生きていれば提供できるので、可用性が極めて高い

=== デメリット ===

 * 非同期レプリケーションのためマスターで完了したはずの更新結果がまだスレーブに転送されていない可能性がある。
 * 最新の更新結果を確実に読み取る必要がある場合、参照処理はマスターに対して行う必要がある
 * マスターの更新トラフィックが極めて高いと、スレーブはマスターに対して再現なく遅れる可能性がある。
 * マスター障害時、アプリケーション側でそれを検知、新しいマスターサーバーの判定、そのサーバーへの接続などを考える必要がある。
 * つまり、''フェイルバック''が一般的に面倒。
 
== マスター/マスター型の構成 ==

MySQLのレプリケーションではマスターからスレーブにコピーするという方方向への処理をするものですが、この片方向への処理をたがいに持ちある構成を''マルチマスター構成と呼びます。''

更新作業は片方のサーバーに対してのみ行います。どちらを更新するか、行き先を固定するためにロードバランサーなどを使用します。この場合は行き先が複数あって分散する、という使い方をしません。接続先をアプリケーションから見た場合にロードバランサーに固定することが目的です。


